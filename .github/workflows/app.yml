name: Build image & update ECS task
on:
  workflow_dispatch:
    branches:
      - green
  push:
    branches:
      - master
    paths:
      - 'application/**'
      - '.github/workflows/app.yml'
jobs:
  find_enviroment:
    defaults:
      run:
        working-directory: ./application    
    runs-on: ubuntu-latest
    # environment:
    #   name: approval
    # env:
    #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }} 
    #   ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
    #   AWS_REGION: ${{ secrets.AWS_REGION }}
    #   REPO_NAME: ${{ secrets.REPO_NAME }}
    steps:
    - uses: actions/checkout@v2  
    - name: run bash script
      run: |
        chmod +x deploy.sh
        ./deploy.sh
    - name: Upload env result for job 1
      uses: actions/upload-artifact@v3
      with:
        name: deployenv
        path: test/test






    # - name: Login to ECR
    #   run: make login_ecr
    # - name: Build green docker image
    #   run: make green_build_image
    # - name: Push image to green ECR
    #   run: make green_push_image
    # - name: Recreate green ECS tasks
    #   run: make green_update_ecs

  blue_deploy:
    defaults:
      run:
        working-directory: ./application    
    runs-on: ubuntu-latest
    needs: find_enviroment
    steps:
      - name: Download env file
        uses: actions/download-artifact@v3
        with:
          name: deployenv
      - name: run_bash
        shell: bash
        run: |
          value=`cat test`
        if : steps.run_bash.value == 'green'
      - name: deploy to blue environment
        # uses: actions/checkout@v2  
        run: make blue_deploy
    # environment:
    #   name: approval
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }} 
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      REPO_NAME: ${{ secrets.REPO_NAME }}

    
   

  # green_deploy:
  #   defaults:
  #     run:
  #       working-directory: ./application    
  #   runs-on: ubuntu-latest
  #   needs: find_enviroment
  #   if: GITHUB_ENV == 'green'
  #   environment:
  #     name: approval
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }} 
  #     ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     REPO_NAME: ${{ secrets.REPO_NAME }}
  #   steps:
  #   - uses: actions/checkout@v2  
  #   - name: deploy to green environment
  #     run: make green_deploy
